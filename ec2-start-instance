#!/usr/bin/env ruby

#
# Author: Bo Yu (boyu2011@gmail.com)
#
# This program used for start an EC2 instance and wait for it to be running.
#
# SYNOPSIS
#	ec2-start-instance [-hv] [-a ami] -K PRIVATE_KEY -C CERT -k KEYPAIR -g SECURITY_GROUP
#
# DESCRIPTION
# 	The ec2-start-instance tool will start an EC2 instance and wait for it to
#       be running, then print to STDOUT the instance identifier and the host-
#	name.  As the tool honors a number of environment variables as noted in
#	the section ENVIRONMENT, it is useful for scripting other, more advanced
#	tools. 
#

require 'optparse'

#
# parse the commandline arguments
#

# add option switch and handler

options = {}

option_parser = OptionParser.new do |opts|
	# ami argument
	options[:ami] = nil
	opts.on( '-a', '--ami AMI', 'Specify AMI' ) { |ami| options[:ami] = ami }

	# help arguemnt
	options[:help] = nil
	opts.on( '-h', '--help', 'Show Usage' ) { |help| options[:help] = help }	# options[:help] <= true

	# verbose argument
	options[:verbose] = nil
	opts.on( '-v', '--verbose', 'Print Useful Information' ) { |verbose| options[:verbose] = verbose }

	# private key argument
	options[:privatekey] = nil
	opts.on( '-K', '--private-key PRIVATE_KEY', 'Specify KEY as the private key to use' ) { |privatekey| options[:privatekey] = privatekey }

	# x509 certificate argument
	options[:cert] = nil
	opts.on( '-C', '--cert CERT', 'Specify CERT as the X509 certificate to use' ) { |cert| options[:cert] = cert }

	# keypair argument
	options[:keypair] = nil
	opts.on( '-k', '--key KEYPAIR', 'Specifies the name of the key pair to use when launching the instance(s)' ) { |key| options[:keypair] = key }

	# security group argument
	options[:group] = nil
	opts.on( '-g', '--group SECURITY_GROUP', 'Specifies the security group' ) { |group| options[:group] = group }
end

option_parser.parse!

#
# filter unvalid arguments
#

# -h	If -h is set, print the Usage Information and exit.

if options[:help] then
	puts "USAGE: ec2-start-instance [-hv] [-a ami] -K PRIVATE_KEY -C CERT -k KEYPAIR -g SECURITY_GROUP"
	exit
end

# -K	Private Key

# if -K is set, check whether a valid private key
if options[:privatekey] then
	private_key = options[:privatekey]
	
	# verify a file is a valid private key
	unless File.file? private_key
		puts "The Private Key is unvalid. Please set a new one."
		exit
	end
# if -K is not set, tell user set one and exit
else
	puts "A Private Key (-K) is required. Please set one."
	exit
end

# -C	X509 Certificate

# if -C is set, check whether a valid certificate
if options[:cert] then
	cert = options[:cert]

	# verify a file is a valid certificate
	unless File.file? cert
		puts "The Certificate is unvalid. Please set a new one."
		exit		
	end	
# if -C is not set, tell user set one and exit
else
	puts "A X509 Certificate (-C) is required. Please set one."
	exit
end

# -k	keypair (it's not a file but a name)

if options[:keypair] then
	keypair = options[:keypair]
# if -k is not set, tell user set one and exit
else
	puts "A key pair (-k) is required. Please set one."
	exit
end

# -g	security group (it's not a file but a name)

if options[:group] then
	security_group = options[:group]
# if -g is not set, tell user set one and exit
else
	puts "A security group (-g) is required. Please set one."
	exit
end


# -a AMI  Start an instance of the given AMI.  If not specified,
# ec2-start-instance will default to ami-b232d0db.

# if -a is set, check whether a valid ami
if options[:ami] then
	ami = options[:ami]
	# if ec2-describe-images returns empty string, that means the ami is unvalid
	if `ec2-describe-images #{ami} -K #{private_key} -C #{cert}` == "" then
		puts "The AMI #{ami} is unvalid, please set a new one."
		exit
	end
# if -a is not set, set the default ami
else
	ami = "ami-b232d0db"
end

# -v	If -v is set, print the useful information

if options[:verbose] then
	verbose = true
else
	verbose = false
end

#
# DEBUG - print argument information
#

puts "AMI    	 : #{ami}" 	    	    if verbose
puts "HELP   	 : #{options[:help]}"       if verbose
puts "VERBOSE	 : #{options[:verbose]}"    if verbose
puts "PRIVATE KEY: #{private_key}" 	    if verbose
puts "CERT	 : #{cert}"	 	    if verbose
puts "KEYPAIR	 : #{keypair}"		    if verbose
puts "GROUP	 : #{security_group}"	    if verbose	


#
# start an EC2 instance by calling the ec2-run-instances
#

# start an EC2 instance
puts "# Starting an EC2 instance..." if verbose
output = `ec2-run-instances #{ami} -K #{private_key} -C #{cert} --availability-zone us-east-1a -t t1.micro -k #{keypair} -g #{security_group}`
puts output if verbose

puts "# SLEEPING 30" if verbose
sleep(30)
output_array = output.split("\t")
instance_id = output_array[4]

# get instance information
puts "# Getting instance information..." if verbose
output = `ec2-describe-instances #{instance_id} -K #{private_key} -C #{cert}`
puts output if verbose
output_array = output.split("\t")
public_dns = output_array[6]
puts "#{instance_id}\t#{public_dns}\t"

